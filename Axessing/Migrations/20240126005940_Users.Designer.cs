// <auto-generated />
using System;
using Axessing.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Axessing.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240126005940_Users")]
    partial class Users
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

            modelBuilder.Entity("Axessing.Models.Schema.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "100",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b08c62f-71e6-4a79-b1e5-653673ed2960",
                            Email = "muhamed.shaban@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Muhamed Shabani",
                            NormalizedEmail = "MUHAMED.SHABAN@HOTMAIL.COM",
                            NormalizedUserName = "MUHAMEDSH",
                            PhoneNumber = "+389 71 894 975",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8378a38f-1f49-4f5e-b99e-dc5511f26526",
                            TwoFactorEnabled = false,
                            UserName = "omuj",
                            WorkspaceId = 1
                        },
                        new
                        {
                            Id = "101",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da20d35a-c8d1-451a-adcf-1d5b9056e9bd",
                            Email = "podgragja.a@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Agon Podgragja",
                            NormalizedEmail = "PODGRAGJA.A@HOTMAIL.COM",
                            NormalizedUserName = "POGI",
                            PhoneNumber = "+389 71 818 819",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e89fe5f2-a859-41e1-a104-87a25f1f1fba",
                            TwoFactorEnabled = false,
                            UserName = "pogi",
                            WorkspaceId = 1
                        });
                });

            modelBuilder.Entity("Axessing.Models.Schema.Label", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("HexValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Label");
                });

            modelBuilder.Entity("Axessing.Models.Schema.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 26, 1, 59, 40, 827, DateTimeKind.Local).AddTicks(5625),
                            Description = "Lorem ipsum dolor sit amet at avis mia seguind ralf cuspat en colo lat gerda mecant e.",
                            LastModifiedDate = new DateTime(2024, 1, 26, 1, 59, 40, 827, DateTimeKind.Local).AddTicks(5626),
                            Stage = 1,
                            Title = "Create new dashboard",
                            WorkspaceId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 1, 26, 1, 59, 40, 827, DateTimeKind.Local).AddTicks(5631),
                            Description = "Lorem ipsum dolor sit amet at avis mia seguind ralf cuspat en colo lat gerda mecant e.",
                            LastModifiedDate = new DateTime(2024, 1, 26, 1, 59, 40, 827, DateTimeKind.Local).AddTicks(5632),
                            Stage = 2,
                            Title = "Change state of data models",
                            WorkspaceId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 1, 26, 1, 59, 40, 827, DateTimeKind.Local).AddTicks(5635),
                            Description = "Lorem ipsum dolor sit amet at avis mia seguind ralf cuspat en colo lat gerda mecant e.",
                            LastModifiedDate = new DateTime(2024, 1, 26, 1, 59, 40, 827, DateTimeKind.Local).AddTicks(5636),
                            Stage = 0,
                            Title = "Type state error when accessing ticket",
                            WorkspaceId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 1, 26, 1, 59, 40, 827, DateTimeKind.Local).AddTicks(5638),
                            Description = "Lorem ipsum dolor sit amet at avis mia seguind ralf cuspat en colo lat gerda mecant e.",
                            LastModifiedDate = new DateTime(2024, 1, 26, 1, 59, 40, 827, DateTimeKind.Local).AddTicks(5639),
                            Stage = 0,
                            Title = "Git log error after update",
                            WorkspaceId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 1, 26, 1, 59, 40, 827, DateTimeKind.Local).AddTicks(5642),
                            Description = "Lorem ipsum dolor sit amet at avis mia seguind ralf cuspat en colo lat gerda mecant e.",
                            LastModifiedDate = new DateTime(2024, 1, 26, 1, 59, 40, 827, DateTimeKind.Local).AddTicks(5643),
                            Stage = 4,
                            Title = "Wishlist sharing problems",
                            WorkspaceId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 1, 26, 1, 59, 40, 827, DateTimeKind.Local).AddTicks(5647),
                            Description = "Lorem ipsum dolor sit amet at avis mia seguind ralf cuspat en colo lat gerda mecant e.",
                            LastModifiedDate = new DateTime(2024, 1, 26, 1, 59, 40, 827, DateTimeKind.Local).AddTicks(5648),
                            Stage = 3,
                            Title = "Telegram does not accept list of type x",
                            WorkspaceId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 1, 26, 1, 59, 40, 827, DateTimeKind.Local).AddTicks(5651),
                            Description = "Lorem ipsum dolor sit amet at avis mia seguind ralf cuspat en colo lat gerda mecant e.",
                            LastModifiedDate = new DateTime(2024, 1, 26, 1, 59, 40, 827, DateTimeKind.Local).AddTicks(5652),
                            Stage = 0,
                            Title = "Button color palette should be changed",
                            WorkspaceId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 1, 26, 1, 59, 40, 827, DateTimeKind.Local).AddTicks(5654),
                            Description = "Lorem ipsum dolor sit amet at avis mia seguind ralf cuspat en colo lat gerda mecant e.",
                            LastModifiedDate = new DateTime(2024, 1, 26, 1, 59, 40, 827, DateTimeKind.Local).AddTicks(5655),
                            Stage = 5,
                            Title = "Account appears only when logged in",
                            WorkspaceId = 1
                        });
                });

            modelBuilder.Entity("Axessing.Models.Schema.Workspace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Workspaces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Lorem ipsum dolor sit amet.",
                            LogoURL = "https://png.pngtree.com/png-vector/20221119/ourmid/pngtree-aa-letter-logos-png-image_6471608.png",
                            Name = "Axessing - Monorepo"
                        });
                });

            modelBuilder.Entity("LabelTicket", b =>
                {
                    b.Property<int>("LabelsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TicketsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LabelsId", "TicketsId");

                    b.HasIndex("TicketsId");

                    b.ToTable("LabelTicket");
                });

            modelBuilder.Entity("Axessing.Models.Schema.AppUser", b =>
                {
                    b.HasOne("Axessing.Models.Schema.Workspace", "Workspace")
                        .WithMany("Collaborators")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Axessing.Models.Schema.Ticket", b =>
                {
                    b.HasOne("Axessing.Models.Schema.Workspace", "Workspace")
                        .WithMany("Tickets")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("LabelTicket", b =>
                {
                    b.HasOne("Axessing.Models.Schema.Label", null)
                        .WithMany()
                        .HasForeignKey("LabelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Axessing.Models.Schema.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Axessing.Models.Schema.Workspace", b =>
                {
                    b.Navigation("Collaborators");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
